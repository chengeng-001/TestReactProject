{"ast":null,"code":"var _jsxFileName = \"F:\\\\WebStormCreate4\\\\react5\\\\myapp\\\\src\\\\componets\\\\03_hooks\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport ReactDOM from 'react-dom'; // 类式组件 // 只是用于找到等同方法组件的类 功能 不影响开发\n// export default class Hooks extends React.Component {\n//     state = { count: 0 }\n//     // ref组件\n//     MyRef = React.createRef();\n//     add = () => {\n//         this.setState((state) => {\n//             return { count: state.count + 1 }\n//         })\n//     }\n//     componentDidMount() {\n//         this.Time = setInterval(() => {\n//             // 函数式调用\n//             this.setState(state => ({ count: state.count + 1 }));\n//         }, 1000);\n//     }\n//     onMount = () => {\n//         // 卸载组件\n//         ReactDOM.unmountComponentAtNode(document.getElementById('root'));\n//     }\n//     componentWillUnmount() {\n//         // 停止定时器\n//         clearInterval(this.Time);\n//     }\n//     // ref 组件控制\n//     change = () => {\n//         // 获取ref 的值 \n//         let values = this.MyRef.current.value;\n//         console.log(values);\n//     }\n//     render() {\n//         return (\n//             <div>\n//                 <input type=\"text\" ref={this.MyRef}/>\n//                 <h2>当前求和为: {this.state.count}</h2>\n//                 <button onClick={this.add}>+</button>\n//                 <button onClick={this.onMount}>卸载组件</button>\n//                 <button onClick ={this.change}>\n//                     点击激活ref\n//                 </button>\n//             </div>\n//         )\n//     }\n// }\n// 函数式组件\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Hooks() {\n  _s();\n\n  // hooks方法调用\n  //第一个是状态 , 第二个是更新方法\n  const [count, setCount] = React.useState(0);\n  const [name, setName] = React.useState('tom');\n  const MyRef = React.useRef(); // hooks 方法生命周期使用\n  // 在方法中监测组件的活动内容\n  // React.useEffect(() => {\n  //     console.log(\"@\");\n  // },[count]);  // 添加数组 可以监测数组内的内容 // 如果不写是监测整个组件的内容\n\n  React.useEffect(() => {\n    const Time = setInterval(() => {\n      // 方法返回数值\n      setCount(count => count + 1);\n    }, 1000); // 返回的函数相当于ComponentWillOnMount 生命周期\n\n    return () => {\n      clearInterval(Time); // 测试\n      // console.log(\"dsada\");\n    };\n  }, []); // 如果不添加数组数值会成指数型增长\n\n  function add() {\n    // 第一种写法\n    // setCount(count + 1);\n    // 第二种写法\n    setCount(count => count + 1);\n  }\n\n  function changeName() {\n    // 更新字符串数据\n    setName('jiek');\n  }\n\n  function onMount() {\n    // 删除组件样式\n    ReactDOM.unmountComponentAtNode(document.getElementById('root'));\n  } // ref 组件展示\n\n\n  function HandleRef() {\n    let values = MyRef.current.value;\n    console.log(values);\n  } // console.log(count, setCount);\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      ref: MyRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"\\u540D\\u79F0 \", name]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"\\u5F53\\u524D\\u6C42\\u548C\\u4E3A: \", count]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: add,\n      children: \"+\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: changeName,\n      children: \"\\u6539\\u53D8\\u540D\\u79F0\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onMount,\n      children: \"\\u5378\\u8F7D\\u7EC4\\u4EF6\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: HandleRef,\n      children: \"\\u70B9\\u51FB\\u6FC0\\u6D3Bref\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Hooks, \"3lrYUXshx3M2P6w0qRa+4iFx7eE=\");\n\n_c = Hooks;\nexport default Hooks;\n\nvar _c;\n\n$RefreshReg$(_c, \"Hooks\");","map":{"version":3,"sources":["F:/WebStormCreate4/react5/myapp/src/componets/03_hooks/index.js"],"names":["React","ReactDOM","Hooks","count","setCount","useState","name","setName","MyRef","useRef","useEffect","Time","setInterval","clearInterval","add","changeName","onMount","unmountComponentAtNode","document","getElementById","HandleRef","values","current","value","console","log"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB,C,CAGA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;;;;AACA,SAASC,KAAT,GAAiB;AAAA;;AAEb;AACA;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBJ,KAAK,CAACK,QAAN,CAAe,CAAf,CAA1B;AACA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBP,KAAK,CAACK,QAAN,CAAe,KAAf,CAAxB;AACA,QAAMG,KAAK,GAAIR,KAAK,CAACS,MAAN,EAAf,CANa,CASb;AACA;AACA;AACA;AACA;;AAGAT,EAAAA,KAAK,CAACU,SAAN,CAAgB,MAAM;AAClB,UAAMC,IAAI,GAAGC,WAAW,CAAC,MAAM;AAC3B;AACAR,MAAAA,QAAQ,CAACD,KAAK,IAAIA,KAAK,GAAC,CAAhB,CAAR;AACH,KAHuB,EAGtB,IAHsB,CAAxB,CADkB,CAMlB;;AACA,WAAO,MAAM;AACTU,MAAAA,aAAa,CAACF,IAAD,CAAb,CADS,CAGR;AACD;AACH,KALD;AAMH,GAbD,EAaE,EAbF,EAhBa,CA6BP;;AAEN,WAASG,GAAT,GAAe;AACX;AACA;AACA;AACAV,IAAAA,QAAQ,CAACD,KAAK,IAAIA,KAAK,GAAG,CAAlB,CAAR;AACH;;AAED,WAASY,UAAT,GAAsB;AAClB;AACAR,IAAAA,OAAO,CAAC,MAAD,CAAP;AACH;;AAED,WAASS,OAAT,GAAmB;AAEf;AACAf,IAAAA,QAAQ,CAACgB,sBAAT,CAAgCC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAAhC;AACH,GA/CY,CAiDb;;;AACA,WAASC,SAAT,GAAqB;AACjB,QAAIC,MAAM,GAAGb,KAAK,CAACc,OAAN,CAAcC,KAA3B;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYJ,MAAZ;AACH,GArDY,CAsDb;;;AACA,sBACI;AAAA,4BACI;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,GAAG,EAAEb;AAAxB;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAA,kCAAQF,IAAR;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI;AAAA,qDAAYH,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA,YAHJ,eAII;AAAQ,MAAA,OAAO,EAAEW,GAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAJJ,eAKI;AAAQ,MAAA,OAAO,EAAEC,UAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YALJ,eAMI;AAAQ,MAAA,OAAO,EAAEC,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YANJ,eAOI;AAAQ,MAAA,OAAO,EAAEI,SAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAPJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAYH;;GAnEQlB,K;;KAAAA,K;AAqET,eAAeA,KAAf","sourcesContent":["import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\n\r\n\r\n// 类式组件 // 只是用于找到等同方法组件的类 功能 不影响开发\r\n// export default class Hooks extends React.Component {\r\n\r\n//     state = { count: 0 }\r\n\r\n//     // ref组件\r\n//     MyRef = React.createRef();\r\n\r\n//     add = () => {\r\n//         this.setState((state) => {\r\n//             return { count: state.count + 1 }\r\n//         })\r\n//     }\r\n\r\n//     componentDidMount() {\r\n//         this.Time = setInterval(() => {\r\n//             // 函数式调用\r\n//             this.setState(state => ({ count: state.count + 1 }));\r\n//         }, 1000);\r\n//     }\r\n\r\n//     onMount = () => {\r\n//         // 卸载组件\r\n//         ReactDOM.unmountComponentAtNode(document.getElementById('root'));\r\n        \r\n//     }\r\n\r\n//     componentWillUnmount() {\r\n//         // 停止定时器\r\n//         clearInterval(this.Time);\r\n//     }\r\n\r\n//     // ref 组件控制\r\n//     change = () => {\r\n//         // 获取ref 的值 \r\n//         let values = this.MyRef.current.value;\r\n//         console.log(values);\r\n//     }\r\n\r\n//     render() {\r\n//         return (\r\n//             <div>\r\n//                 <input type=\"text\" ref={this.MyRef}/>\r\n//                 <h2>当前求和为: {this.state.count}</h2>\r\n//                 <button onClick={this.add}>+</button>\r\n//                 <button onClick={this.onMount}>卸载组件</button>\r\n//                 <button onClick ={this.change}>\r\n//                     点击激活ref\r\n//                 </button>\r\n//             </div>\r\n//         )\r\n//     }\r\n// }\r\n\r\n\r\n// 函数式组件\r\nfunction Hooks() {\r\n\r\n    // hooks方法调用\r\n    //第一个是状态 , 第二个是更新方法\r\n    const [count, setCount] = React.useState(0);\r\n    const [name, setName] = React.useState('tom');\r\n    const MyRef  = React.useRef();\r\n    \r\n\r\n    // hooks 方法生命周期使用\r\n    // 在方法中监测组件的活动内容\r\n    // React.useEffect(() => {\r\n    //     console.log(\"@\");\r\n    // },[count]);  // 添加数组 可以监测数组内的内容 // 如果不写是监测整个组件的内容\r\n\r\n\r\n    React.useEffect(() => {\r\n        const Time = setInterval(() => {\r\n            // 方法返回数值\r\n            setCount(count => count+1);\r\n        },1000);\r\n        \r\n        // 返回的函数相当于ComponentWillOnMount 生命周期\r\n        return () => {\r\n            clearInterval(Time);\r\n\r\n             // 测试\r\n            // console.log(\"dsada\");\r\n        }\r\n    },[]) // 如果不添加数组数值会成指数型增长\r\n\r\n    function add() {\r\n        // 第一种写法\r\n        // setCount(count + 1);\r\n        // 第二种写法\r\n        setCount(count => count + 1);\r\n    }\r\n\r\n    function changeName() {\r\n        // 更新字符串数据\r\n        setName('jiek');\r\n    }\r\n\r\n    function onMount() {\r\n        \r\n        // 删除组件样式\r\n        ReactDOM.unmountComponentAtNode(document.getElementById('root'));\r\n    }\r\n\r\n    // ref 组件展示\r\n    function HandleRef() {\r\n        let values = MyRef.current.value;\r\n        console.log(values);\r\n    }\r\n    // console.log(count, setCount);\r\n    return (\r\n        <div>\r\n            <input type=\"text\" ref={MyRef}/>\r\n            <h1>名称 {name}</h1>\r\n            <h2>当前求和为: {count}</h2>\r\n            <button onClick={add}>+</button>\r\n            <button onClick={changeName}>改变名称</button>\r\n            <button onClick={onMount}>卸载组件</button>\r\n            <button onClick={HandleRef}>点击激活ref</button>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Hooks;\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}