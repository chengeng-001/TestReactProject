{"ast":null,"code":"var _jsxFileName = \"F:\\\\WebStormCreate4\\\\react5\\\\myapp\\\\src\\\\componets\\\\03_hooks\\\\index.js\";\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom'; // 类式组件 // 只是用于找到等同方法组件的类 功能 不影响开发\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class Hooks extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      count: 0\n    };\n\n    this.add = () => {\n      this.setState(state => {\n        return {\n          count: state.count + 1\n        };\n      });\n    };\n\n    this.onMount = () => {\n      // 停止定时器\n      clearInterval(this.Time); // 卸载组件\n\n      ReactDOM.unmountComponentAtNode(document.getElementById('root'));\n    };\n  }\n\n  componentDidMount() {\n    this.Time = setInterval(() => {\n      // 函数式调用\n      this.setState(state => ({\n        count: state.count + 1\n      }));\n    }, 1000);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"\\u5F53\\u524D\\u6C42\\u548C\\u4E3A: \", this.state.count]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.add,\n        children: \"+\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.onMount,\n        children: \"\\u5378\\u8F7D\\u7EC4\\u4EF6\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this);\n  }\n\n} // 函数式组件\n// function Hooks() {\n//     // hooks方法调用\n//     //第一个是状态 , 第二个是更新方法\n//     const [count, setCount] = React.useState(0);\n//     const [name, setName] = React.useState('tom');\n//     // hooks 方法生命周期使用\n//     // 在方法中监测组件的活动内容\n//     // React.useEffect(() => {\n//     //     console.log(\"@\");\n//     // },[count]);  // 添加数组 可以监测数组内的内容 // 如果不写是监测整个组件的内容\n//     React.useEffect(() => {\n//         setInterval(() => {\n//             // 方法返回数值\n//             setCount(count => count+1);\n//             console.log(\"dsad\");\n//         },1000);\n//     },[]) // 如果不添加数组数值会成指数型增长\n//     function add() {\n//         // 第一种写法\n//         // setCount(count + 1);\n//         // 第二种写法\n//         setCount(count => count + 1)\n//     }\n//     function changeName() {\n//         // 更新字符串数据\n//         setName('jiek')\n//     }\n//     // console.log(count, setCount);\n//     return (\n//         <div>\n//             <h1>名称 {name}</h1>\n//             <h2>当前求和为: {count}</h2>\n//             <button onClick={add}>+</button>\n//             <button onClick={changeName}>改变名称</button>\n//         </div>\n//     )\n// }\n// export default Hooks;","map":{"version":3,"sources":["F:/WebStormCreate4/react5/myapp/src/componets/03_hooks/index.js"],"names":["React","Component","ReactDOM","Hooks","state","count","add","setState","onMount","clearInterval","Time","unmountComponentAtNode","document","getElementById","componentDidMount","setInterval","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,QAAP,MAAqB,WAArB,C,CAGA;;;AACA,eAAe,MAAMC,KAAN,SAAoBF,SAApB,CAA8B;AAAA;AAAA;AAAA,SAEzCG,KAFyC,GAEjC;AAAEC,MAAAA,KAAK,EAAE;AAAT,KAFiC;;AAAA,SAIzCC,GAJyC,GAInC,MAAM;AACR,WAAKC,QAAL,CAAeH,KAAD,IAAW;AACrB,eAAO;AAAEC,UAAAA,KAAK,EAAED,KAAK,CAACC,KAAN,GAAc;AAAvB,SAAP;AACH,OAFD;AAGH,KARwC;;AAAA,SAiBzCG,OAjByC,GAiB/B,MAAM;AACZ;AACAC,MAAAA,aAAa,CAAC,KAAKC,IAAN,CAAb,CAFY,CAGZ;;AACAR,MAAAA,QAAQ,CAACS,sBAAT,CAAgCC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAAhC;AACH,KAtBwC;AAAA;;AAUzCC,EAAAA,iBAAiB,GAAG;AAChB,SAAKJ,IAAL,GAAYK,WAAW,CAAC,MAAM;AAC1B;AACA,WAAKR,QAAL,CAAcH,KAAK,KAAK;AAAEC,QAAAA,KAAK,EAAED,KAAK,CAACC,KAAN,GAAc;AAAvB,OAAL,CAAnB;AACH,KAHsB,EAGpB,IAHoB,CAAvB;AAIH;;AASDW,EAAAA,MAAM,GAAG;AACL,wBACI;AAAA,8BACI;AAAA,uDAAY,KAAKZ,KAAL,CAAWC,KAAvB;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAQ,QAAA,OAAO,EAAE,KAAKC,GAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI;AAAQ,QAAA,OAAO,EAAE,KAAKE,OAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAQH;;AAjCwC,C,CAqC7C;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA","sourcesContent":["import React, { Component } from 'react'\r\nimport ReactDOM from 'react-dom'\r\n\r\n\r\n// 类式组件 // 只是用于找到等同方法组件的类 功能 不影响开发\r\nexport default class Hooks extends Component {\r\n\r\n    state = { count: 0 }\r\n\r\n    add = () => {\r\n        this.setState((state) => {\r\n            return { count: state.count + 1 }\r\n        })\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.Time = setInterval(() => {\r\n            // 函数式调用\r\n            this.setState(state => ({ count: state.count + 1 }));\r\n        }, 1000);\r\n    }\r\n\r\n    onMount = () => {\r\n        // 停止定时器\r\n        clearInterval(this.Time);\r\n        // 卸载组件\r\n        ReactDOM.unmountComponentAtNode(document.getElementById('root'));\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h2>当前求和为: {this.state.count}</h2>\r\n                <button onClick={this.add}>+</button>\r\n                <button onClick={this.onMount}>卸载组件</button>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n// 函数式组件\r\n// function Hooks() {\r\n\r\n//     // hooks方法调用\r\n//     //第一个是状态 , 第二个是更新方法\r\n//     const [count, setCount] = React.useState(0);\r\n//     const [name, setName] = React.useState('tom');\r\n\r\n//     // hooks 方法生命周期使用\r\n//     // 在方法中监测组件的活动内容\r\n//     // React.useEffect(() => {\r\n//     //     console.log(\"@\");\r\n//     // },[count]);  // 添加数组 可以监测数组内的内容 // 如果不写是监测整个组件的内容\r\n\r\n//     React.useEffect(() => {\r\n//         setInterval(() => {\r\n//             // 方法返回数值\r\n//             setCount(count => count+1);\r\n//             console.log(\"dsad\");\r\n//         },1000);\r\n//     },[]) // 如果不添加数组数值会成指数型增长\r\n\r\n//     function add() {\r\n//         // 第一种写法\r\n//         // setCount(count + 1);\r\n//         // 第二种写法\r\n//         setCount(count => count + 1)\r\n//     }\r\n\r\n//     function changeName() {\r\n//         // 更新字符串数据\r\n//         setName('jiek')\r\n//     }\r\n\r\n//     // console.log(count, setCount);\r\n//     return (\r\n//         <div>\r\n//             <h1>名称 {name}</h1>\r\n//             <h2>当前求和为: {count}</h2>\r\n//             <button onClick={add}>+</button>\r\n//             <button onClick={changeName}>改变名称</button>\r\n//         </div>\r\n//     )\r\n\r\n// }\r\n\r\n// export default Hooks;\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}