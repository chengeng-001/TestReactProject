{"ast":null,"code":"var _jsxFileName = \"F:\\\\WebStormCreate4\\\\react5\\\\myapp\\\\src\\\\componets\\\\03_hooks\\\\index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom'; // 类式组件 // 只是用于找到等同方法组件的类 功能 不影响开发\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class Hooks extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      count: 0\n    };\n    this.MyRef = /*#__PURE__*/React.createRef();\n\n    this.add = () => {\n      this.setState(state => {\n        return {\n          count: state.count + 1\n        };\n      });\n    };\n\n    this.onMount = () => {\n      // 卸载组件\n      ReactDOM.unmountComponentAtNode(document.getElementById('root'));\n    };\n\n    this.change = () => {\n      let values = this.MyRef.current.value;\n      console.log(values);\n    };\n  }\n\n  componentDidMount() {\n    this.Time = setInterval(() => {\n      // 函数式调用\n      this.setState(state => ({\n        count: state.count + 1\n      }));\n    }, 1000);\n  }\n\n  componentWillUnmount() {\n    // 停止定时器\n    clearInterval(this.Time);\n  } // ref 组件控制\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        ref: this.MyRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"\\u5F53\\u524D\\u6C42\\u548C\\u4E3A: \", this.state.count]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.add,\n        children: \"+\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.onMount,\n        children: \"\\u5378\\u8F7D\\u7EC4\\u4EF6\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.change,\n        children: \"\\u70B9\\u51FB\\u6FC0\\u6D3Bref\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this);\n  }\n\n} // 函数式组件\n// function Hooks() {\n//     // hooks方法调用\n//     //第一个是状态 , 第二个是更新方法\n//     const [count, setCount] = React.useState(0);\n//     const [name, setName] = React.useState('tom');\n//     // hooks 方法生命周期使用\n//     // 在方法中监测组件的活动内容\n//     // React.useEffect(() => {\n//     //     console.log(\"@\");\n//     // },[count]);  // 添加数组 可以监测数组内的内容 // 如果不写是监测整个组件的内容\n//     React.useEffect(() => {\n//         const Time = setInterval(() => {\n//             // 方法返回数值\n//             setCount(count => count+1);\n//         },1000);\n//         // 返回的函数相当于ComponentWillOnMount 生命周期\n//         return () => {\n//             clearInterval(Time);\n//              // 测试\n//             // console.log(\"dsada\");\n//         }\n//     },[]) // 如果不添加数组数值会成指数型增长\n//     function add() {\n//         // 第一种写法\n//         // setCount(count + 1);\n//         // 第二种写法\n//         setCount(count => count + 1);\n//     }\n//     function changeName() {\n//         // 更新字符串数据\n//         setName('jiek');\n//     }\n//     function onMount() {\n//         // 删除组件样式\n//         ReactDOM.unmountComponentAtNode(document.getElementById('root'));\n//     }\n//     // console.log(count, setCount);\n//     return (\n//         <div>\n//             <input type=\"text\" ref={this.myRef}/>\n//             <h1>名称 {name}</h1>\n//             <h2>当前求和为: {count}</h2>\n//             <button onClick={add}>+</button>\n//             <button onClick={changeName}>改变名称</button>\n//             <button onClick={onMount}>卸载组件</button>\n//         </div>\n//     )\n// }\n// export default Hooks;","map":{"version":3,"sources":["F:/WebStormCreate4/react5/myapp/src/componets/03_hooks/index.js"],"names":["React","ReactDOM","Hooks","Component","state","count","MyRef","createRef","add","setState","onMount","unmountComponentAtNode","document","getElementById","change","values","current","value","console","log","componentDidMount","Time","setInterval","componentWillUnmount","clearInterval","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB,C,CAGA;;;AACA,eAAe,MAAMC,KAAN,SAAoBF,KAAK,CAACG,SAA1B,CAAoC;AAAA;AAAA;AAAA,SAE/CC,KAF+C,GAEvC;AAAEC,MAAAA,KAAK,EAAE;AAAT,KAFuC;AAAA,SAK/CC,KAL+C,gBAKvCN,KAAK,CAACO,SAAN,EALuC;;AAAA,SAO/CC,GAP+C,GAOzC,MAAM;AACR,WAAKC,QAAL,CAAeL,KAAD,IAAW;AACrB,eAAO;AAAEC,UAAAA,KAAK,EAAED,KAAK,CAACC,KAAN,GAAc;AAAvB,SAAP;AACH,OAFD;AAGH,KAX8C;;AAAA,SAoB/CK,OApB+C,GAoBrC,MAAM;AACZ;AACAT,MAAAA,QAAQ,CAACU,sBAAT,CAAgCC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAAhC;AAEH,KAxB8C;;AAAA,SAgC/CC,MAhC+C,GAgCtC,MAAM;AACX,UAAIC,MAAM,GAAG,KAAKT,KAAL,CAAWU,OAAX,CAAmBC,KAAhC;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYJ,MAAZ;AACH,KAnC8C;AAAA;;AAa/CK,EAAAA,iBAAiB,GAAG;AAChB,SAAKC,IAAL,GAAYC,WAAW,CAAC,MAAM;AAC1B;AACA,WAAKb,QAAL,CAAcL,KAAK,KAAK;AAAEC,QAAAA,KAAK,EAAED,KAAK,CAACC,KAAN,GAAc;AAAvB,OAAL,CAAnB;AACH,KAHsB,EAGpB,IAHoB,CAAvB;AAIH;;AAQDkB,EAAAA,oBAAoB,GAAG;AACnB;AACAC,IAAAA,aAAa,CAAC,KAAKH,IAAN,CAAb;AACH,GA7B8C,CA+B/C;;;AAMAI,EAAAA,MAAM,GAAG;AACL,wBACI;AAAA,8BACI;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,GAAG,EAAE,KAAKnB;AAA7B;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAA,uDAAY,KAAKF,KAAL,CAAWC,KAAvB;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI;AAAQ,QAAA,OAAO,EAAE,KAAKG,GAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHJ,eAII;AAAQ,QAAA,OAAO,EAAE,KAAKE,OAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJJ,eAKI;AAAQ,QAAA,OAAO,EAAG,KAAKI,MAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cALJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAWH;;AAjD8C,C,CAqDnD;AACA;AAEA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA","sourcesContent":["import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\n\r\n\r\n// 类式组件 // 只是用于找到等同方法组件的类 功能 不影响开发\r\nexport default class Hooks extends React.Component {\r\n\r\n    state = { count: 0 }\r\n\r\n    // ref组件\r\n    MyRef = React.createRef();\r\n\r\n    add = () => {\r\n        this.setState((state) => {\r\n            return { count: state.count + 1 }\r\n        })\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.Time = setInterval(() => {\r\n            // 函数式调用\r\n            this.setState(state => ({ count: state.count + 1 }));\r\n        }, 1000);\r\n    }\r\n\r\n    onMount = () => {\r\n        // 卸载组件\r\n        ReactDOM.unmountComponentAtNode(document.getElementById('root'));\r\n        \r\n    }\r\n\r\n    componentWillUnmount() {\r\n        // 停止定时器\r\n        clearInterval(this.Time);\r\n    }\r\n\r\n    // ref 组件控制\r\n    change = () => {\r\n        let values = this.MyRef.current.value;\r\n        console.log(values);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <input type=\"text\" ref={this.MyRef}/>\r\n                <h2>当前求和为: {this.state.count}</h2>\r\n                <button onClick={this.add}>+</button>\r\n                <button onClick={this.onMount}>卸载组件</button>\r\n                <button onClick ={this.change}>\r\n                    点击激活ref\r\n                </button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n// 函数式组件\r\n// function Hooks() {\r\n\r\n//     // hooks方法调用\r\n//     //第一个是状态 , 第二个是更新方法\r\n//     const [count, setCount] = React.useState(0);\r\n//     const [name, setName] = React.useState('tom');\r\n\r\n    \r\n\r\n//     // hooks 方法生命周期使用\r\n//     // 在方法中监测组件的活动内容\r\n//     // React.useEffect(() => {\r\n//     //     console.log(\"@\");\r\n//     // },[count]);  // 添加数组 可以监测数组内的内容 // 如果不写是监测整个组件的内容\r\n\r\n\r\n//     React.useEffect(() => {\r\n//         const Time = setInterval(() => {\r\n//             // 方法返回数值\r\n//             setCount(count => count+1);\r\n//         },1000);\r\n        \r\n//         // 返回的函数相当于ComponentWillOnMount 生命周期\r\n//         return () => {\r\n//             clearInterval(Time);\r\n\r\n//              // 测试\r\n//             // console.log(\"dsada\");\r\n//         }\r\n//     },[]) // 如果不添加数组数值会成指数型增长\r\n\r\n//     function add() {\r\n//         // 第一种写法\r\n//         // setCount(count + 1);\r\n//         // 第二种写法\r\n//         setCount(count => count + 1);\r\n//     }\r\n\r\n//     function changeName() {\r\n//         // 更新字符串数据\r\n//         setName('jiek');\r\n//     }\r\n\r\n//     function onMount() {\r\n        \r\n//         // 删除组件样式\r\n//         ReactDOM.unmountComponentAtNode(document.getElementById('root'));\r\n//     }\r\n\r\n//     // console.log(count, setCount);\r\n//     return (\r\n//         <div>\r\n//             <input type=\"text\" ref={this.myRef}/>\r\n//             <h1>名称 {name}</h1>\r\n//             <h2>当前求和为: {count}</h2>\r\n//             <button onClick={add}>+</button>\r\n//             <button onClick={changeName}>改变名称</button>\r\n//             <button onClick={onMount}>卸载组件</button>\r\n//         </div>\r\n//     )\r\n\r\n// }\r\n\r\n// export default Hooks;\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}